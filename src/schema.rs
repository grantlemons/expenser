// @generated automatically by Diesel CLI.

/// A module containing custom SQL type definitions
///
/// (Automatically generated by Diesel.)
pub mod sql_types {
    /// The `citext` SQL type
    ///
    /// (Automatically generated by Diesel.)
    #[derive(diesel::sql_types::SqlType, std::fmt::Debug)]
    #[diesel(postgres_type(name = "citext"))]
    pub struct Citext;
}

diesel::table! {
    /// Representation of the `invoice_permissions` table.
    ///
    /// (Automatically generated by Diesel.)
    invoice_permissions (access_id) {
        /// The `access_id` column of the `invoice_permissions` table.
        ///
        /// Its SQL type is `Int8`.
        ///
        /// (Automatically generated by Diesel.)
        access_id -> Int8,
        /// The `borrower_id` column of the `invoice_permissions` table.
        ///
        /// Its SQL type is `Int8`.
        ///
        /// (Automatically generated by Diesel.)
        borrower_id -> Int8,
        /// The `invoice_id` column of the `invoice_permissions` table.
        ///
        /// Its SQL type is `Int8`.
        ///
        /// (Automatically generated by Diesel.)
        invoice_id -> Int8,
        /// The `read_access` column of the `invoice_permissions` table.
        ///
        /// Its SQL type is `Bool`.
        ///
        /// (Automatically generated by Diesel.)
        read_access -> Bool,
        /// The `write_access` column of the `invoice_permissions` table.
        ///
        /// Its SQL type is `Bool`.
        ///
        /// (Automatically generated by Diesel.)
        write_access -> Bool,
    }
}

diesel::table! {
    /// Representation of the `invoice_proof` table.
    ///
    /// (Automatically generated by Diesel.)
    invoice_proof (proof_id) {
        /// The `proof_id` column of the `invoice_proof` table.
        ///
        /// Its SQL type is `Int8`.
        ///
        /// (Automatically generated by Diesel.)
        proof_id -> Int8,
        /// The `invoice_id` column of the `invoice_proof` table.
        ///
        /// Its SQL type is `Int8`.
        ///
        /// (Automatically generated by Diesel.)
        invoice_id -> Int8,
        /// The `data` column of the `invoice_proof` table.
        ///
        /// Its SQL type is `Bytea`.
        ///
        /// (Automatically generated by Diesel.)
        data -> Bytea,
    }
}

diesel::table! {
    /// Representation of the `invoices` table.
    ///
    /// (Automatically generated by Diesel.)
    invoices (invoice_id) {
        /// The `invoice_id` column of the `invoices` table.
        ///
        /// Its SQL type is `Int8`.
        ///
        /// (Automatically generated by Diesel.)
        invoice_id -> Int8,
        /// The `owner_id` column of the `invoices` table.
        ///
        /// Its SQL type is `Int8`.
        ///
        /// (Automatically generated by Diesel.)
        owner_id -> Int8,
    }
}

diesel::table! {
    use diesel::sql_types::*;
    use super::sql_types::Citext;

    /// Representation of the `users` table.
    ///
    /// (Automatically generated by Diesel.)
    users (user_id) {
        /// The `user_id` column of the `users` table.
        ///
        /// Its SQL type is `Int8`.
        ///
        /// (Automatically generated by Diesel.)
        user_id -> Int8,
        /// The `username` column of the `users` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 128]
        username -> Varchar,
        /// The `email` column of the `users` table.
        ///
        /// Its SQL type is `Citext`.
        ///
        /// (Automatically generated by Diesel.)
        email -> Citext,
        /// The `profile_picture` column of the `users` table.
        ///
        /// Its SQL type is `Nullable<Bytea>`.
        ///
        /// (Automatically generated by Diesel.)
        profile_picture -> Nullable<Bytea>,
        /// The `password_hash` column of the `users` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 128]
        password_hash -> Varchar,
    }
}

diesel::joinable!(invoice_permissions -> users (borrower_id));
diesel::joinable!(invoices -> users (owner_id));

diesel::allow_tables_to_appear_in_same_query!(
    invoice_permissions,
    invoice_proof,
    invoices,
    users,
);
